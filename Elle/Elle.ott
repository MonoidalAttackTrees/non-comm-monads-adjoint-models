% Input variables.
metavar vars ,  n , a, x , y, z , w , m , o ::=  
indexvar ivar, i , k , j , l ::=
metavar const, b ::= 

grammar


% Lambek category:
A, B, C :: 'lform_' ::=
  | Base    ::   :: Base          
  {{tex \mathsf{B} }}
  | UnitS    ::   :: UnitS
  {{tex \mathsf{UnitS} }}
  | A (>) B ::   :: Tensor        
  | A -> B  ::   :: RFun          
  | A <- B  ::   :: LFun          
  | ( A )   :: M :: Parens 
  | h( A )  :: M :: HiddenParens 
  {{ tex [[A]] }}
  | F X     ::   :: LeftAdj
  {{tex \mathsf{F}[[X]] }}

% Symmetric monoidal closed category:
X, Y, Z :: 'sform_' ::=
  | Base    ::   :: Base          
  {{tex \mathsf{B} }}
  | UnitT    ::   :: UnitT
  {{tex \mathsf{UnitT} }}
  | X (x) Y ::   :: Tensor        
  | X -o Y  ::   :: Fun          
  | ( X )   :: M :: Parens 
  | h( X )  :: M :: HiddenParens 
  {{ tex [[X]] }}
  | Gf A     ::   :: RightAdj
  {{tex \mathsf{G}[[A]] }}

T :: 'type_' ::=
  | A :: :: LType
  | X :: :: SType

p :: 'pattern_' ::=
  | - :: :: hole
  {{tex \star }}
  | x :: :: var
  | trivT :: :: trivT
  {{tex \mathsf{trivT} }}
  | trivS :: :: trivS
  {{tex \mathsf{trivS} }}
  | p (x) p' :: :: ten
  | p (>) p' :: :: lambek
  | F p :: :: LeftAdj
  {{tex \mathsf{F}\,[[p]] }}
  | Gf p     ::   :: RightAdj
  {{tex \mathsf{G}\,[[p]] }}

s :: 'term_' ::=
  | x :: :: Var
  | b :: :: Const
  | trivS :: :: UnitS
  {{tex \mathsf{trivS} }}
  | let s1 : T be p in s2 :: :: let1
  {{tex \mathsf{let}\,[[s1]] : [[T]]\,\mathsf{be}\,[[p]]\,\mathsf{in}\,[[s2]] }}
  | let t : T be p in s :: :: let2
  {{tex \mathsf{let}\,[[t]] : [[T]]\,\mathsf{be}\,[[p]]\,\mathsf{in}\,[[s]] }}
  | s1 (>) s2 :: :: Tensor
  | \l x : A . s :: :: LFun
  {{tex \lambda_l [[x]] : [[A]].[[s]] }}
  | \r x : A . s :: :: RFun
  {{tex \lambda_r [[x]] : [[A]].[[s]] }}
  | appl s1 s2   :: :: Appl
  {{tex \mathsf{app}_l\,[[s1]]\,[[s2]] }}
  | appr s1 s2   :: :: Appr
  {{tex \mathsf{app}_r\,[[s1]]\,[[s2]] }}
  | ex s1 , s2 with x1 , x2 in s3 :: :: Ex
  {{tex \mathsf{ex}\,[[s1]],[[s2]]\,\mathsf{with}\,[[x1]],[[x2]]\,\mathsf{in}\,[[s3]] }}
  | contrR x as s1 , s2 in s3 :: :: ContrR
  {{tex \mathsf{contrR}\,[[x]]\,\mathsf{as}\,[[s1]],[[s2]]\,\mathsf{in}\,[[s3]] }}
  | contrL x as s1 , s2 in s3 :: :: ContrL
  {{tex \mathsf{contrL}\,[[x]]\,\mathsf{as}\,[[s1]],[[s2]]\,\mathsf{in}\,[[s3]] }}
  | weak x in s :: :: Weak
  {{tex \mathsf{weak}\,[[x]]\,\mathsf{in}\,[[s]] }}
  | [ s1 / x ] s2 :: M :: Subst
  | [ t / x ] s   :: M :: Subst2
  | ( s )         :: S :: parens
  | h( s )        :: M :: hparen
  {{tex [[s]] }}
  | F t           ::   :: LeftAdj
  {{tex \mathsf{F}[[t]] }}

t :: 'sterm_' ::=
  | x :: :: Var
  | b :: :: Const
  | trivT :: :: UnitT
  {{tex \mathsf{trivT} }}
  | let t1 : X be p in t2 :: :: let
  {{tex \mathsf{let}\,[[t1]] : [[X]]\,\mathsf{be}\,[[p]]\,\mathsf{in}\,[[t2]] }}
  | t1 (x) t2 :: :: Tensor
  | \ x : X . t :: :: Fun
  {{tex \lambda [[x]] : [[X]].[[t]] }}  
  | app t1 t2   :: :: App
  {{tex \mathsf{app}\,[[t1]]\,[[t2]] }}  
  | ex t1 , t2 with x1 , x2 in t3 :: :: Ex
  {{tex \mathsf{ex}\,[[t1]],[[t2]]\,\mathsf{with}\,[[x1]],[[x2]]\,\mathsf{in}\,[[t3]] }}
  | contrR x as t1 , t2 in t3 :: :: ContrR
  {{tex \mathsf{contrR}\,[[x]]\,\mathsf{as}\,[[t1]],[[t2]]\,\mathsf{in}\,[[t3]] }}
  | contrL x as t1 , t2 in t3 :: :: ContrL
  {{tex \mathsf{contrR}\,[[x]]\,\mathsf{as}\,[[t1]],[[t2]]\,\mathsf{in}\,[[t3]] }}
  | weak x in t :: :: Weak
  {{tex \mathsf{weak}\,[[x]]\,\mathsf{in}\,[[t]] }}
  | [ t1 / x ] t2 :: M :: Subst
  | ( t )         :: S :: parens
  | h( t )        :: M :: hparen
  | Gf s           ::   :: RightAdj
  {{tex \mathsf{G}[[s]] }}

G {{tex \Gamma}}, D {{tex \Delta}}, I {{tex \Phi}}, P {{tex \Psi}} :: 'Ctx_' ::=
  | .       :: :: Empty
  {{tex \cdot }}
  | G1 , G2 :: :: Ext
  | x : A   :: :: El
  | ( G )   :: S :: Paren
  | x : X   ::   :: EParen

formula :: 'formula_' ::=
  | judgement            ::   :: judgement
  | formula1 && formula2 :: M :: quad
  {{tex [[formula1]] \quad [[formula2]] }}
  | formula1 ... formulai :: M :: vec
  | ( formula )          :: S :: parens
  {{tex [[formula]] }}
  | x nin FV ( s ) :: :: FV
  {{tex [[x]] \not\in \mathsf{FV}([[s]]) }}
  | x nin1 | G , D , P | :: :: NiNCtx1
  {{tex [[x]] \not\in | [[G]], [[D]], [[P]] | }}
  | x nin2 | G , D |     :: :: NiNCtx2
  {{tex [[x]] \not\in | [[G]], [[D]] | }}
  | x nin3 | I , P |     :: :: NiNCtx3
  {{tex [[x]] \not\in | [[I]], [[P]] | }}

terminals :: 'terminals_' ::=
  | UnitT :: :: UnitT
  {{tex \mathsf{UnitT} }}
  | UnitS :: :: UnitS
  {{tex \mathsf{UnitS} }}
  | (x)  :: :: Tensor
  {{tex \otimes }}
  | (>)  :: :: Lambek
  {{tex \triangleright }}
  | (e)  :: :: ETensor
  {{tex \circop{e} }}  
  | (w)  :: :: WTensor
  {{tex \circop{w} }}  
  | (c)  :: :: CTensor
  {{tex \circop{c} }}
  | ->   :: :: LFun
  {{tex \rightharpoonup }}
  | <-   :: :: RFun
  {{tex \leftharpoonup }}
  | -o   :: :: Limp
  {{tex \multimap }}
  | |-   :: :: Vdash
  {{tex \vdash }}
  | ~>   :: :: To
  {{tex \leadsto }}
 
defns
  Jtype :: '' ::=

defn
  G |- t : X :: :: tty :: 'T_'
by 

  -------------- :: var
  x : X |- x : X

  G,D |- t : X
  ------------------------------------------------ :: unitL
  G,x : UnitT,D |- let x : UnitT be trivT in t : X

  ------------------ :: unitR
  . |- trivT : UnitT

  G, x : X, y : Y, D |- t : Z
  ------------------------------------------------ :: beta
  G, z : Y, w : X, D |- ex w, z with x, y in t : Z

  G1, x : X, G2, y : X, G3 |- t : Y
  ---------------------------------------------- :: contrR
  G1, G2, z : X, G3 |- contrR z as x, y in t : Y

  G1, x : X, G2, y : X, G3 |- t : Y
  ---------------------------------------------- :: contrL
  G1, z : X, G2, G3 |- contrR z as x, y in t : Y

  G, D |- t : Y && x nin2 |G, D|
  ------------------------------ :: weak
  G, x : X, D |- weak x in t : Y

  G |- t1 : X && D1,x : X,D2 |- t2 : Y
  ------------------------------------ :: cut
  D1,G,D2 |- [t1/x]t2 : Y

  G,x : X,y : Y,D |- t : Z
  ------------------------------------------------------ :: tenL
  G,z : X (x) Y,D |- let z : X (x) Y be x (x) y in t : Z

  G |- t1 : X && D |- t2 : Y
  -------------------------- :: ten
  G,D |- t1 (x) t2 : X (x) Y  

  G |- t1 : X && D1,x : Y,D2 |- t2 : Z
  ----------------------------------------- :: impL
  D1,G,y : X -o Y,D2 |- [app y t1/x]t2 : Z

  G, x : X |- t : Y
  ---------------------- :: impR
  G |- \ x:X.t : X -o Y

  G |- s : A
  ---------------- :: Gr
  G |- Gf s : Gf A

defn
  P |- s : A :: :: sty :: 'S_'
by

  -------------- :: ax
  x : A |- x : A

  I, P |- s : A
  -------------------------------------------------- :: unitL1
  I, x : UnitT, P |- let x : UnitT be trivT in s : A

  I, P |- s : A
  -------------------------------------------------- :: unitL2
  I, x : UnitS, P |- let x : UnitS be trivS in s : A

  ------------------ :: unitR
  . |- trivS : UnitS

  I, x : X, y : Y, P |- s : A
  ------------------------------------------------ :: beta
  I, z : Y, w : X, P |- ex w, z with x, y in s : A

  I1, x : X, I2, y : X, I3 |- s : A
  ---------------------------------------------- :: contrR
  I1, I2, y : X, I3 |- contrR z as x, y in s : A

  I1, x : X, I2, y : X, I3 |- s : A
  ---------------------------------------------- :: contrL
  I1, y : X, I2, I3 |- contrR z as x, y in s : A

  I, P |- s : A && x nin3 |I, P|
  ------------------------------ :: weak
  I, x : X, P |- weak x in s : B

  G |- t : X && I1, x : X, I2 |- s : A
  ------------------------------------ :: cut1
  I1, G, I1 |- [t/x]s : A

  P |- s1 : A && I1, x : A, I2 |- s2 : A
  -------------------------------------- :: cut2
  I1, P, I2 |- [s1/x]s2 : A

  I, x : X, y : Y, P |- s : A
  -------------------------------------------------------- :: tenL1
  I, z : X (x) Y, P |- let z : X (x) Y be x (x) y in s : A

  I, x : A, y : B, P |- s : C
  -------------------------------------------------------- :: tenL2
  I, z : A (>) B, P |- let z : A (>) B be x (>) y in s : C

  I |- s1 : A && P |- s2 : B
  --------------------------- :: tenR
  I, P |- s1 (>) s2 : A (>) B

  G |- t : X && I, x : Y, P |- s : A
  ----------------------------------------- :: impL
  I, G, y : X -o Y, P |- [app y t/x]s : A

  I |- s1 : A && P, x : B |- s2 : C
  ------------------------------------------ :: imprL
  P, I, y : A -> B |- [appr y s1/x]s2 : C

  I |- s1 : A && x : B, P |- s2 : C
  ------------------------------------------ :: implL
  y : B <- A, I, P |- [appl y s1/x]s2 : C

  I, x : A |- s : B
  ------------------------ :: imprR
  I |- \r x:A.s : A -> B

  x : A, I |- s : B
  ------------------------ :: implR
  I |- \l x:A.s : B <- A

  G |- t : X
  ---------------- :: Fr
  G |- F t : F X

  I, x : X, P |- s : A
  -------------------------------------------- :: Fl
  I, y : F X, P |- let z : F X be F x in s : A

  I, x : A, P |- s : A
  ---------------------------------------------- :: Gl
  I, y : Gf A, P |- let z : Gf A be Gf x in s : A





















